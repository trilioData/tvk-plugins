# CI WorkFlow for build, test and release of Plugin Packages
name: Plugin Packages CI
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - 'plugins/**'
      - 'hack/validate-plugin-manifests.sh'
      - 'hack/update-plugin-manifests.sh'
      - 'hack/update-preflight-manifest.sh'
      - 'hack/update-log-collector-manifest.sh'
      - 'hack/update-target-browser-manifest.sh'
      - '.github/workflows/plugin-manifests.yml'

env:
  GKE_CLUSTER: ci-cluster
  GKE_ZONE: us-east1-c

jobs:
  # pre-build job runs yaml lint, shell lint, golangci-lint and detects file changes to sets job variables which will be used to
  # decide whether to run subsequent jobs(build_test_preflight, build_test_log-collector and build_test_target-browser)
  pre-build:
    runs-on: ubuntu-latest
    outputs:
      preflight: ${{ steps.filter.outputs.preflight }}
      testPreflight: ${{ steps.filter.outputs.testPreflight }}
      logCollector: ${{ steps.filter.outputs.logCollector }}
      targetBrowser: ${{ steps.filter.outputs.targetBrowser }}
      testTargetBrowser: ${{ steps.filter.outputs.testTargetBrowser }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          fail_on_error: true
          reporter: local
          filter_mode: nofilter

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.30

      - name: Run Shell lint
        run: make shell-lint

      - name: Verify code patterns
        run: make verify-code-patterns

      - name: Detect File Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared: &shared
              - 'Makefile'
              - 'hack/**'
              - '.goreleaser.yml'
              - '.github/workflows/plugin-packages.yml'

            sharedPreflight: &sharedPreflight
              - *shared
              - 'tools/preflight/**'
              - 'tests/preflight/**'
            preflight:
              - *sharedPreflight
              - '.krew/tvk-preflight.yaml'
            testPreflight:
              - *sharedPreflight

            logCollector:
              - *shared
              - 'cmd/log-collector/**'
              - 'internal/**'
              - '.krew/tvk-log-collector.yaml'
              - 'tools/log-collector/**'

            sharedTargetBrowser: &sharedTargetBrowser
              - *shared
              - 'cmd/target-browser/**'
              - 'tools/target-browser/**'
              - 'internal/**'
              - 'tests/target-browser/**'
            targetBrowser:
              - *sharedTargetBrowser
              - '.krew/tvk-target-browser.yaml'
            testTargetBrowser:
              - *sharedTargetBrowser

  # build_test_preflight job build preflight packages, runs integration tests and tests packages for plugin creation(install, uninstall)
  # upload preflight packages to github artifacts if tags('/ref/tags') are pushed
  build_test_preflight:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.preflight' will be 'false' so to run 'build_test_preflight' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.preflight == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build Preflight Package
      run: make build-preflight

    - name: Set up Cloud SDK
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCS_PROJECT_ID }}
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        export_default_credentials: true

    - name: Authenticate and Connect to GKE cluster
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        use_auth_provider: true
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: Run Preflight Integration Tests
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      run: make test-preflight-integration

    - name: Ensure Required Utilities Installed
      run: make install-required-utilities

    - name: Test Preflight Plugin Locally
      run: make test-preflight-plugin-locally

    - name: Upload Preflight Plugin Packges to github artifact
      uses: actions/upload-artifact@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: preflight
        path: |
          build/preflight.tar.gz
          build/preflight-sha256.txt

  # build_test_log-collector job builds log-collector package and tests package for plugin creation(install, uninstall)
  build_test_log-collector:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.logCollector' is 'false' so to run 'build_test_log-collector' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.logCollector == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Update '.goreleaser.yaml' for Building Log-Collector Packages only
        run: |
          echo "Updating '.goreleaser.yaml' for Building Log-Collector Packages only"
          sed -i '/binary: target-browser/a \ \ skip: true' .goreleaser.yml

      - name: Build Log-Collector Packages
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --snapshot --skip-publish --rm-dist

      - name: Ensure Required Utilities Installed for Plugin Testing
        run: make install-required-utilities

      - name: Test Log-Collector Plugin Locally
        run: make test-log-collector-plugin-locally

      - name: Set up Cloud SDK
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GCS_ARTIFACTS_CREDENTIALS }}
          export_default_credentials: true

      - name: Upload Preflight Plugin Packges to GCS artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        run: gsutil cp dist/log-collector_linux_amd64/log-collector gs://trilio-artifacts/tvk-plugins/log-collector/main/log-collector

  # build_test_target-browser job builds target-browser packages, runs integration tests and tests packages for plugin creation(install, uninstall)
  build_test_target-browser:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.targetBrowser' is 'false' so to run 'build_test_target-browser' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.targetBrowser == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Update '.goreleaser.yaml' for Building Target-Browser Packages only
        run: |
          echo "Updating '.goreleaser.yaml' for Building Target-Browser Packages only"
          sed -i '/binary: log-collector/a \ \ skip: true' .goreleaser.yml

      - name: Build Target-Browser Packages
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --snapshot --skip-publish --rm-dist

      - name: Ensure Required Utilities Installed
        run: make install-required-utilities

      - name: Set up Cloud SDK
        if: (needs.pre-build.outputs.testTargetBrowser == 'true') || startsWith(github.ref, 'refs/tags/')
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate and Connect to GKE cluster
        if: (needs.pre-build.outputs.testTargetBrowser == 'true') || startsWith(github.ref, 'refs/tags/')
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          use_auth_provider: true
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Run Target-Browser Tests
        if: (needs.pre-build.outputs.testTargetBrowser == 'true') || startsWith(github.ref, 'refs/tags/')
        run: make test-target-browser-integration
        env:
          job_name: target-browser
          build_id: tb-${{ github.run_id }}
          nfs_server_ip: ${{ secrets.NFS_SERVER_IP }}

      - name: Publish Target-Browser Tests Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: target-browser-junit
          path: tests/target-browser/target-browser-junit.xml

      - name: Test Target-Browser Plugin Locally
        run: make test-target-browser-plugin-locally

  # pre-release job determines whether to create release or not and sets job variables which will be used to decide
  # what packages(preflight, log-collector, target-browser) should be included in release
  pre-release:
    runs-on: ubuntu-latest
    needs: [build_test_preflight, build_test_log-collector, build_test_target-browser]
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      create_release: ${{ steps.detect_changes.outputs.create_release }}
      release_preflight: ${{ steps.detect_changes.outputs.release_preflight }}
      release_log_collector: ${{ steps.detect_changes.outputs.release_log_collector }}
      release_target_browser: ${{ steps.detect_changes.outputs.release_target_browser }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine File Changes for Release
        id: detect_changes
        run: hack/check-git-diff-between-tags.sh

  # release job creates and uploads release on github. Also, decides which package to include in release based on conditional constructs
  release:
    runs-on: ubuntu-latest
    needs: pre-release
    if: needs.pre-release.outputs.create_release == 'true' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Preflight Packages from Artifact
        uses: actions/download-artifact@v2
        if: needs.pre-release.outputs.release_preflight == 'true'
        with:
          name: preflight
          path: build

      - name: Update GoReleaser Config for Release
        run: hack/update-goreleaser-yaml.sh
        env:
          release_preflight: ${{needs.pre-release.outputs.release_preflight}}
          release_log_collector: ${{needs.pre-release.outputs.release_log_collector}}
          release_target_browser: ${{needs.pre-release.outputs.release_target_browser}}

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Release with GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
