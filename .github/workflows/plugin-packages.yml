# CI WorkFlow for build, test and release of Plugin Packages
name: Plugin Packages CI
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - 'plugins/**'
      - 'hack/validate-plugin-manifests.sh'
      - 'hack/update-plugin-manifests.sh'
      - 'hack/update-preflight-manifest.sh'
      - 'hack/update-log-collector-manifest.sh'
      - 'hack/update-cleanup-manifest.sh'
      - '.github/workflows/plugin-manifests.yml'

env:
  GKE_CLUSTER: ci-cluster
  GKE_REGION: us-east1

jobs:
  # pre-build job runs yaml lint, shell lint, golangci-lint and detects file changes to sets job variables which will be used to
  # decide whether to run subsequent jobs(build_test_preflight, build_push_preflight_image, build_test_cleanup,
  # build_test_log-collector )
  pre-build:
    runs-on: ubuntu-latest
    outputs:
      preflight: ${{ steps.filter.outputs.preflight }}
      testPreflight: ${{ steps.filter.outputs.testPreflight }}
      cleanup: ${{ steps.filter.outputs.cleanup }}
      testCleanup: ${{ steps.filter.outputs.testCleanup }}
      logCollector: ${{ steps.filter.outputs.logCollector }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          fail_on_error: true
          reporter: local
          filter_mode: nofilter

      #      - name: Run golangci-lint
      #        uses: golangci/golangci-lint-action@v2
      #        with:
      #          version: v1.42
      #
      #      - name: Run Shell lint
      #        run: make shell-lint

      - name: Verify code patterns
        run: make verify-code-patterns

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Detect File Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared: &shared
              - 'Makefile'
              - 'hack/**'
              - '.goreleaser.yml'
              - '.github/workflows/plugin-packages.yml'

            sharedPreflight: &sharedPreflight
              - *shared
              - 'cmd/preflight/**'
              - 'tools/preflight/**'
              - 'internal/**'
              - 'tests/preflight/**'
            preflight:
              - *sharedPreflight
              - '.krew/tvk-preflight.yaml'
              - 'docker-images/preflight/Dockerfile'
            testPreflight:
              - *sharedPreflight

            sharedCleanup: &sharedCleanup
              - *shared
              - 'tools/cleanup/**'
              - 'tests/cleanup/**'
            cleanup:
              - *sharedCleanup
              - '.krew/tvk-cleanup.yaml'
            testCleanup:
              - *sharedCleanup

            logCollector:
              - *shared
              - 'cmd/log-collector/**'
              - 'internal/**'
              - '.krew/tvk-log-collector.yaml'
              - 'tools/log-collector/**'

  # build_test_preflight job build preflight packages, runs integration tests and tests packages for plugin creation(install, uninstall)
  # upload preflight packages to github artifacts if tags('/ref/tags') are pushed
  build_test_preflight:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.preflight' will be 'false' so to run 'build_test_preflight' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.preflight == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Update '.goreleaser.yaml' for Building Preflight Packages only
      run: |
        echo "Updating '.goreleaser.yaml' for Building Preflight Packages only"
        sed -i '/binary: log-collector/a \ \ skip: true' .goreleaser.yml

    - name: Build Preflight Packages
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist

    - name: Set up Cloud SDK
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GCS_PROJECT_ID }}
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        export_default_credentials: true

    - name: Authenticate and Connect to GKE cluster
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_REGION }}
        use_auth_provider: true
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: Run Preflight Unit Tests
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      run: make test-preflight-unit
      env:
        job_name: preflight
        build_id: pf-${{ github.run_id }}

    - name: Run Preflight Integration Tests
      if: (needs.pre-build.outputs.testPreflight == 'true') || startsWith(github.ref, 'refs/tags/')
      run: make test-preflight-integration
      env:
        job_name: preflight
        build_id: pf-${{ github.run_id }}

    - name: Ensure Required Utilities Installed
      run: make install-required-utilities

    - name: Publish Preflight Tests Report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: preflight-junit
        path: junit-report.xml

    - name: Test Preflight Plugin Locally
      run: make test-preflight-plugin-locally

  # build_push_preflight_image job builds preflight docker image, and pushes it to public docker registry,
  # if changes for tags('/ref/tags') are pushed or otherwise pushes to private docker registry
  build_push_preflight_image:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.preflight' will be 'false' so to run 'build_test_preflight' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.preflight == 'true') || startsWith(github.ref, 'refs/tags/')
    env:
      GCR_PRIVATE_DOCKER_REGISTRY: "gcr.io"
      GCR_PUBLIC_DOCKER_REGISTRY: "eu.gcr.io"
      GCR_PROJECT: ${{ secrets.GCS_PROJECT_ID }}
      IMAGE_NAME: "preflight"
    steps:

      # check out the repository
      - name: Checkout
        uses: actions/checkout@v2

      # provide emulated environments for building on architecture other than the host arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64,linux/arm64,linux/ppc64le

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Set up docker auth
        run: |
          gcloud auth configure-docker

      # This step is run when push is not for a tag
      - name: Sets image tag env to private registry for internal build
        if: (needs.pre-build.outputs.preflight == 'true') && !startsWith(github.ref, 'refs/tags/')
        run: echo "DOCKER_REGISTRY=$GCR_PRIVATE_DOCKER_REGISTRY" >> $GITHUB_ENV

      # This step is run when push is for a tag
      - name: Sets image tag env to public registry for release
        if: (needs.pre-build.outputs.preflight == 'true') && startsWith(github.ref, 'refs/tags/')
        run: echo "DOCKER_REGISTRY=$GCR_PUBLIC_DOCKER_REGISTRY" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{env.DOCKER_REGISTRY}}/${{env.GCR_PROJECT}}/${{env.IMAGE_NAME}}
          tags: |
            type=sha,prefix=,format=long,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}},enable=${{startsWith(github.ref, 'refs/tags/')}}
            type=raw,value=latest,enable=${{startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')}}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker-images/preflight/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Configure AWS Credentials
        if: (needs.pre-build.outputs.preflight == 'true') && startsWith(github.ref, 'refs/tags/')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Private
        id: login-ecr
        if: (needs.pre-build.outputs.preflight == 'true') && startsWith(github.ref, 'refs/tags/')
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Tag, and push docker image to Amazon ECR
        if: (needs.pre-build.outputs.preflight == 'true') && startsWith(github.ref, 'refs/tags/')
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: trilio
          IMAGE_TAG: ${{ github.ref_name }}
          REPOSITORY: preflight
          DOCKER_REGISTRY: eu.gcr.io
          GCR_PROJECT: ${{ secrets.GCS_PROJECT_ID }}
        run: |
          docker pull --platform linux/amd64 $DOCKER_REGISTRY/$GCR_PROJECT/$REPOSITORY:$IMAGE_TAG
          docker tag $DOCKER_REGISTRY/$GCR_PROJECT/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker tag $DOCKER_REGISTRY/$GCR_PROJECT/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY-payg:$IMAGE_TAG
          docker tag $DOCKER_REGISTRY/$GCR_PROJECT/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY-byol:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY-payg:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY-byol:$IMAGE_TAG

  # build_test_cleanup job build cleanup packages, runs integration tests and tests packages for plugin creation(install, uninstall)
  # upload cleanup packages to github artifacts if tags('/ref/tags') are pushed
  build_test_cleanup:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.cleanup' will be 'false' so to run 'build_test_cleanup' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.cleanup == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build Cleanup Package
      run: make build-cleanup

      #- name: Set up Cloud SDK
      #if: (needs.pre-build.outputs.testCleanup == 'true') || startsWith(github.ref, 'refs/tags/')
      #uses: google-github-actions/setup-gcloud@v0
      #with:
      #  project_id: ${{ secrets.GCS_PROJECT_ID }}
      #  service_account_key: ${{ secrets.GKE_SA_KEY }}
      #  export_default_credentials: true

      #- name: Authenticate and Connect to GKE cluster
      #if: (needs.pre-build.outputs.testCleanup == 'true') || startsWith(github.ref, 'refs/tags/')
      #uses: google-github-actions/get-gke-credentials@main
      #with:
      #  cluster_name: ${{ env.GKE_CLUSTER }}
      #  location: ${{ env.GKE_REGION }}
      #  use_auth_provider: true
      #  credentials: ${{ secrets.GKE_SA_KEY }}

      #- name: Run Cleanup Integration Tests
      #if: (needs.pre-build.outputs.testCleanup == 'true') || startsWith(github.ref, 'refs/tags/')
      #run: make test-cleanup-integration

    - name: Ensure Required Utilities Installed
      run: make install-required-utilities

    - name: Test Cleanup Plugin Locally
      run: make test-cleanup-plugin-locally

    - name: Upload Cleanup Plugin Packges to github artifact
      uses: actions/upload-artifact@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: cleanup
        path: |
          build/cleanup.tar.gz
          build/cleanup-sha256.txt

  # build_test_log-collector job builds log-collector package and tests package for plugin creation(install, uninstall)
  build_test_log-collector:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.logCollector' is 'false' so to run 'build_test_log-collector' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.logCollector == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Update '.goreleaser.yaml' for Building Log-Collector Packages only
        run: |
          echo "Updating '.goreleaser.yaml' for Building Log-Collector Packages only"
          sed -i '/binary: preflight/a \ \ skip: true' .goreleaser.yml

      - name: Build Log-Collector Packages
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --snapshot --skip-publish --rm-dist

      - name: Ensure Required Utilities Installed for Plugin Testing
        run: make install-required-utilities

      - name: Test Log-Collector Plugin Locally
        run: make test-log-collector-plugin-locally

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate and Connect to GKE cluster
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          use_auth_provider: true
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Run Log Collector Unit Tests
        if: (needs.pre-build.outputs.logCollector == 'true') || startsWith(github.ref, 'refs/tags/')
        run: make test-logcollector-unit
        env:
          job_name: logcollector
          build_id: lc-${{ github.run_id }}

      - name: Set up GCS
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GCS_ARTIFACTS_CREDENTIALS }}
          export_default_credentials: true

      - name: Upload Log-Collector binary to GCS artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        run: gsutil cp dist/log-collector_linux_amd64/log-collector gs://trilio-artifacts/tvk-plugins/log-collector/main/log-collector

  # pre-release job determines whether to create release or not and sets job variables which will be used to decide
  # what packages(preflight, cleanup, log-collector) should be included in release
  pre-release:
    runs-on: ubuntu-latest
    needs: [build_test_preflight, build_push_preflight_image, build_test_log-collector, build_test_cleanup]
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      create_release: ${{ steps.detect_changes.outputs.create_release }}
      release_preflight: ${{ steps.detect_changes.outputs.release_preflight }}
      release_cleanup: ${{ steps.detect_changes.outputs.release_cleanup }}
      release_log_collector: ${{ steps.detect_changes.outputs.release_log_collector }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine File Changes for Release
        id: detect_changes
        run: hack/check-git-diff-between-tags.sh

  # release job creates and uploads release on github. Also, decides which package to include in release based on conditional constructs
  release:
    runs-on: ubuntu-latest
    needs: pre-release
    if: needs.pre-release.outputs.create_release == 'true' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download All Plugin Packages from Artifacts
        uses: actions/download-artifact@v2
        if: (needs.pre-release.outputs.release_cleanup == 'true')
        with:
          path: build

      - name: Update GoReleaser Config for Release
        run: hack/update-goreleaser-yaml.sh
        env:
          release_preflight: ${{needs.pre-release.outputs.release_preflight}}
          release_cleanup: ${{needs.pre-release.outputs.release_cleanup}}
          release_log_collector: ${{needs.pre-release.outputs.release_log_collector}}

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Release with GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
