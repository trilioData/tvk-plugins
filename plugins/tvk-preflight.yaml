apiVersion: krew.googlecontainertools.github.com/v1alpha2
kind: Plugin
metadata:
  name: tvk-preflight
spec:
  homepage: https://github.com/trilioData/tvk-plugins/blob/main/docs/preflight/README.md
  shortDescription: TVK application preflight check for k8s cluster
  version: v1.2.0-rc.1
  caveats: |
    Curl and Git neeed to be installed on system for Krew index update to work properly
  platforms:
  - selector:
      matchLabels:
        os: linux
        arch: amd64
    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_linux_amd64.tar.gz
    sha256: 38b78d1c1673d88bc4e0848c5aed75d6bca0af7cc6d180f49d9e393e3747c5da
    bin: preflight
    files:
    - from: '*'
      to: .
  - selector:
      matchLabels:
        os: linux
        arch: arm64
    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_linux_arm64.tar.gz
    sha256: fa82360ef69b6f937ec4284d5830f6cee123624e6eaf6b060726ce67b7e92e44
    bin: preflight
    files:
    - from: '*'
      to: .
  - selector:
      matchLabels:
        os: linux
        arch: arm
    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_linux_arm.tar.gz
    sha256: d04e5ff65bea7fa8f1aa9dbc78c348ed28778f04ad4638c9df53bec70a27c8ce
    bin: preflight
    files:
      - from: '*'
        to: .
  - selector:
      matchLabels:
        os: darwin
        arch: amd64
    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_darwin_amd64.tar.gz
    sha256: 586cc74f4a2f32e11f71d08ff9025f0a7b8f9993cf0f7c3dcf315e20208df44b
    bin: preflight
    files:
    - from: '*'
      to: .
  - selector:
      matchLabels:
        os: darwin
        arch: arm64
    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_darwin_arm64.tar.gz
    sha256: 0523f8541f92712d7e5766751cbb32ee537ec94b375e1a850e7e83ceed6fdb7e
    bin: preflight
    files:
    - from: '*'
      to: .

  - selector:
      matchLabels:
        os: windows
        arch: amd64
    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_windows_amd64.zip
    sha256: fe1ea5a5bb6675356c80e1135f2a563ad332668813f863128b73cf077895bba0
    bin: preflight.exe
    files:
    - from: '*'
      to: .

  #  # TODO: remove/comment following two selectors 'windows/arm64' & 'windows/arm' while adding it to 'plugins' dir, as these are not supported by krew as of now.
  #  - selector:
  #      matchLabels:
  #        os: windows
  #        arch: arm64
  #    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_windows_arm64.zip
  #    sha256: fe7625d60af58b55fb636143dd1935bfec9643c210acc4b104b51514b03e3c7a
  #    bin: preflight.exe
  #    files:
  #    - from: '*'
  #      to: .
  #  - selector:
  #      matchLabels:
  #        os: windows
  #        arch: arm
  #    uri: https://github.com/trilioData/tvk-plugins/releases/download/v1.2.0-rc.1/preflight_v1.2.0-rc.1_windows_arm.zip
  #    sha256: b6d782e23eebe6b6588255ccd44b96c0ad222ebc8c0dbc338b5c19b8d426afb7
  #    bin: preflight.exe
  #    files:
  #    - from: '*'
  #      to: .


  description: |
    tvk-preflight is a kubectl plugin which checks whether all the pre-requisites are met before installing Triliovault
    for Kubernetes(TVK) application in a Kubernetes cluster.

    > Check available flags for preflight plugin with :-
    kubectl tvk-preflight --help

    tvk-preflight contains two subcommands:
    1. run: performs checks on system where this plugin is installed and few checks are performed on the K8s cluster where current-context of kubeconfig is pointing to. Check available flags and options for run subcommand with:-
    kubectl tvk-preflight run --help
    2. cleanup: cleans/deletes the resources created during failed preflight checks and not cleaned-up on failure. Check available flags and options for cleanup subcommand with:-
    kubectl tvk-preflight cleanup --help

    > Usage :-
    1. Perform preflight checks
    # run preflight checks
    kubectl tvk-preflight run --storage-class <storage-class-name>

    # run preflight checks with a particular volume snapshot class
    kubectl tvk-preflight run --storage-class <storage-class-name> --volume-snapshot-class <snapshot-class-name>

    # run preflight checks in a particular namespace
    kubectl tvk-preflight run --storage-class <storage-class-name> --namespace <namespace>

    # run preflight checks with a particular log level
    kubectl tvk-preflight run --storage-class <storage-class-name> --log-level <log-level>

    # cleanup the resources generated during preflight check if preflight check fails. Default is false.
    # If the preflight check is successful, then all resources are cleaned.
    kubectl tvk-preflight run --storage-class <storage-class-name> --cleanup-on-failure

    # run preflight with a particular kubeconfig file
    kubectl tvk-preflight run --storage-class <storage-class-name> --kubeconfig <kubeconfig-file-path>

    # run preflight with local registry and image pull secret
    To use image-pull-secret, local-registry flag must be specified. vice-versa is not true
    kubectl tvk-preflight run --storage-class <storage-class-name> --local-registry <local registry path> --image-pull-secret <image pull secret>

    # run preflight with a particular serviceaccount
    kubectl tvk-preflight run --storage-class <storage-class-name> --service-account-name <service account name>

    2. Perform cleanup of preflight resources
    # clean preflight resources with a particular uid
    kubectl tvk-preflight cleanup --uid <preflight run uid> --namespace <namespace>

    # clean all preflight resources created till date
    kubectl tvk-preflight cleanup --namespace <namespace>

    # clean preflight resource with a specified logging level
    kubectl tvk-preflight cleanup --uid <preflight run uid> --log-level <log-level>

    # cleanup preflight resources with a particular kubeconfig file
    kubectl tvk-preflight cleanup --uid <preflight run uid> --namespace <namespace> --kubeconfig <kubeconfig-file-path>
