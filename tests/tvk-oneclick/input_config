#This file is used to set parameter value for tck-oneclick plugin. This file used when plugin is executed in non-interactive mode

#Specify if plugin should proceed even if same resource exists
if_resource_exists_still_proceed='y'

#[Preflight check parameters]

#Whether or not preflight should be executed [True, False]
PREFLIGHT=True

#Whenthet plugin should proceed even if preflight checks fail.Allowedvalues=[Y,y,n,N]
proceed_even_PREFLIGHT_fail='Y'

#Specify storage class name to be used for pvc to be created,if not set default class would be considered.This paramere is also required for sample test.
storage_class=

#[TVK installation parameters]

#Whether or not TVK should be installed [True, False]
TVK_INSTALL=True

#Specify TVK operator version
operator_version='2.6.1'

#Specify TVK Manager version
triliovault_manager_version='2.6.1'

#Specify namespace name in which TVK should get installed.
tvk_ns='tvk'

#[UI configurations parameters]

#Whether or not TVK UI should be configured [True, False]
CONFIGURE_UI=True

#Specify the way in which TVK UI should be configured['Loadbalancer','Nodeport','PortForwarding']
ui_access_type='Loadbalancer'

#Specify the domain name, this should be present or added in DNS server
domain='domainname'

#Specify TVK host name for TVK UI
tvkhost_name='tvkdemo'

#Specify cluster name to get the kubeconfig for TVK UI. If not specified, cluster name is taken from current context.
cluster_name='trilio-test2'

#[Target creation parameters]

#Whether or not TVK Target should be created [True, False]
TARGET=True

#Specify vendor name for s3 bucket ['Digital_Ocean','Amazon_AWS']
vendor_type='Digital_Ocean'

#Specify DigitalOcean token [ https://cloud.digitalocean.com/account/api/tokens. ]
doctl_token=''

#Specify Target type ['NFS','S3']
target_type='S3'

#Specify access_key for accessing/creating bucket/spaces
access_key='access-key'

#Specify secret key for accessing/creating bucket/spaces
secret_key='secret-key'

#Specify host_base for s3cmd command [know more - https://linux.die.net/man/1/s3cmd ]
host_base=''

#Specify host_bucket for s3cmd command [know more - https://linux.die.net/man/1/s3cmd ]
host_bucket=''

#Specify  gpg_passphrase [know more - https://linux.die.net/man/1/s3cmd ]
gpg_passphrase='trilio'

#Specify the bucket location(this parameter is specific to AWS['us-east-1', 'us-west-1', 'us-west-2', 'eu-west-1', 'eu-central-1', 'ap-northeast-1', 'ap-southeast-1', 'ap-southeast-2', 'sa-east-1']
bucket_location='us-east-1'

#Specify  bucket/space name to be used for storing backup.
bucket_name='tvk-backup-bucket'

#Specify Target name
target_name='tvk-target'

#Specify Namespace name where the target should be created
target_namespace='tvk'

#Specify NS server name/address for NFS type backup target creation
nfs_server=

#Specify exported path for for NFS type backup target creation
nfs_path=

# Specify more NFS options to be provided like: 'nfsvers=4' for NFS type backup target creation.
nfs_options=

#Specify threshold capacity for backup target.Units supported - [Mi,Gi,Ti]
thresholdCapacity='1000Gi'

#[Sample test parameters]

#Sample test execution requires Target creation parameters also.
#If already created, the re-creation part will be skipped.

#Whether or not sample test should be executed [True, False]
SAMPLE_TEST=True

#Specify backup plan name
bk_plan_name='trilio-test-backup'

#Specify namespace where backupplan needs to be created
bk_plan_namespae='trilio-test-backup'

#Specify backup name
backup_name='trilio-test-backup'
#Specify backup namespace[Note: currently backup plan and backup should be in same namespace]
backup_namespace='trilio-test-backup'

#Specify the way in which backup should be taken ['Label_based','Namespace_based','Operator_base','Helm_based']
backup_way='Label_based'

#Whether or not restore should be performed [True, False]
restore=True

#Specify TVK restore name
restore_name='tvk-restore'

#Specify namespace in which restore should be performed
restore_namespace='tvk-restore'
